<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理实验一</title>
      <link href="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="实验一：词法分析"><a href="#实验一：词法分析" class="headerlink" title="实验一：词法分析"></a>实验一：词法分析</h3><h4 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h4><p>实现PL&#x2F;0语言的词法分析器</p><h4 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h4><h5 id="PL-x2F-0语言的单词结构"><a href="#PL-x2F-0语言的单词结构" class="headerlink" title="PL&#x2F;0语言的单词结构"></a>PL&#x2F;0语言的单词结构</h5><p>关键字(共11个)：空格分隔列表如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin  end  if  then while  do  const  var  call  procedure  odd</span><br></pre></td></tr></table></figure><p>标识符：字母序列，最大长度10，不能与上述关键字相同</p><p>常数：整型常数</p><p>算符和界符（14个）：空格分隔列表如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\+ - * / = # &lt; &gt; := ( ) , . ;</span><br></pre></td></tr></table></figure><h5 id="单词种类的划分"><a href="#单词种类的划分" class="headerlink" title="单词种类的划分"></a>单词种类的划分</h5><p>标识符：作为一种</p><p>常数：作为一种</p><p>算符和界符：每种作为一个单独种别</p><p>关键字：每个作为一个单独种别</p><h5 id="PL-x2F-0的语言的词法分析器将要完成以下工作"><a href="#PL-x2F-0的语言的词法分析器将要完成以下工作" class="headerlink" title="PL&#x2F;0的语言的词法分析器将要完成以下工作"></a>PL&#x2F;0的语言的词法分析器将要完成以下工作</h5><p>（1）  跳过分隔符（如空格，回车，制表符）；</p><p>（2）  识别诸如begin，end，if，while等关键字；</p><p>（3）  识别非关键字的一般标识符。</p><p>（4）  识别常数数字序列。</p><p>（5）  识别前面列出的单字符操作符和:&#x3D;双字符特殊符号。</p><h5 id="词法分析器的实现形式"><a href="#词法分析器的实现形式" class="headerlink" title="词法分析器的实现形式"></a>词法分析器的实现形式</h5><p>建议把词法分析器设计成一个<strong>独立子程序</strong>，运行一次产生一个单词符号</p><h5 id="词法分析器的输出形式"><a href="#词法分析器的输出形式" class="headerlink" title="词法分析器的输出形式"></a>词法分析器的输出形式</h5><p>（种别，属性值）</p><p>其中：种别在“2、单词的种别”中进行了定义；<br> 属性值：若单词种别只代表唯一单词，属性值为空；<br>     若单词种别是标识符，为该单词在标识符表中的位置；<br>     若单词种别是常数，属性值为对应常数值。</p><h5 id="标识符表可以简单定义为内容不重复的字符串数组。"><a href="#标识符表可以简单定义为内容不重复的字符串数组。" class="headerlink" title="标识符表可以简单定义为内容不重复的字符串数组。"></a>标识符表可以简单定义为内容不重复的字符串数组。</h5><h5 id="程序的输入：可以读取标准输入，或者打开指定的源程序文件。"><a href="#程序的输入：可以读取标准输入，或者打开指定的源程序文件。" class="headerlink" title="程序的输入：可以读取标准输入，或者打开指定的源程序文件。"></a>程序的输入：可以读取标准输入，或者打开指定的源程序文件。</h5><h4 id="实验代码："><a href="#实验代码：" class="headerlink" title="实验代码："></a>实验代码：</h4><p>输入的测试文本文件（我的路径是：D:DesktopTest.txt）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PL/0 demo</span></span><br><span class="line"></span><br><span class="line">(*</span><br><span class="line">This is a multi-line</span><br><span class="line">comment</span><br><span class="line">*)</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> limit=<span class="number">10</span>;</span><br><span class="line">var n, f, test, t1, t2;</span><br><span class="line">begin</span><br><span class="line">     n := <span class="number">0</span>;</span><br><span class="line">     f := <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">while</span> n <span class="meta"># limit do</span></span><br><span class="line">     begin</span><br><span class="line">          n := n + <span class="number">1</span>;</span><br><span class="line">          f := f * n;</span><br><span class="line">     end;</span><br><span class="line">     test := <span class="number">1</span>+<span class="number">2</span><span class="number">-3</span>*<span class="number">4</span>/(<span class="number">5</span><span class="number">-6</span>)+<span class="number">-7</span>;</span><br><span class="line">t1:=test*<span class="number">2</span>;</span><br><span class="line">t2:=t1+test;</span><br><span class="line">     call print;<span class="comment">// print all var</span></span><br><span class="line">end.</span><br></pre></td></tr></table></figure><p>词法分析器实现代代码：（主要分为预处理和词法分析）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;String.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//预处理</span></span><br><span class="line">    FILE *p;</span><br><span class="line">    <span class="comment">//定义输入文件指针和flag标识</span></span><br><span class="line">    <span class="type">int</span>  falg = <span class="number">0</span>, len, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义匹配关键字，第一个初始为空字符串</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *rwtab[<span class="number">12</span>] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;const&quot;</span>, <span class="string">&quot;var&quot;</span>, <span class="string">&quot;call&quot;</span>, <span class="string">&quot;procedure&quot;</span>, <span class="string">&quot;odd&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//定义输入的字符串数组和单词缓存数组</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">1000</span>], str1[<span class="number">1000</span>], c;</span><br><span class="line">    <span class="comment">//定义种别码syn，读取到的数字num，用于匹配的关键词k</span></span><br><span class="line">    <span class="type">int</span> syn, num;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">char</span> token[<span class="number">10</span>];<span class="comment">//当前读取到的token数组</span></span><br><span class="line">    <span class="keyword">if</span>((p = <span class="built_in">fopen</span>(<span class="string">&quot;D:\\Desktop\\Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>) &#123; <span class="comment">//读取失败时结束</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入文件无法打开&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>((c = <span class="built_in">fgetc</span>(p)) != EOF) &#123; <span class="comment">//读取到文件末尾结束</span></span><br><span class="line">            str[i] = c;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fclose</span>(p);</span><br><span class="line">        str[i] = <span class="string">&#x27;\0&#x27;</span>;   <span class="comment">//str[i]=&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123; <span class="comment">//单行注释</span></span><br><span class="line">                <span class="keyword">while</span>(str[i++] != <span class="string">&#x27;\n&#x27;</span>) &#123;&#125;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123; <span class="comment">//多行注释</span></span><br><span class="line">                <span class="keyword">while</span>(!(str[i] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>)) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27; &#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//多个空格，去除空格</span></span><br><span class="line">                <span class="keyword">while</span>(str[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">if</span>(str1[j - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    str1[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\n&#x27;</span>) &#123; <span class="comment">//换行处理</span></span><br><span class="line">                <span class="keyword">if</span>(str1[j - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    str1[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\t&#x27;</span>) &#123; <span class="comment">//制表符处理</span></span><br><span class="line">                <span class="keyword">if</span>(str1[j - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    str1[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> str1[j++] = str[i];<span class="comment">//记录其他字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        str1[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*********************************************\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* 符号        种别码  || 符号        种别码 *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* begin       1       || *           17     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* end         2       || /           18     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* if          3       || =           19     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* then        4       || #           20     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* while       5       || &lt;           21     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* do          6       || &gt;           22     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* const       7       || (           23     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* var         8       || )           24     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* call        9       || ,           25     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* procedure   10      || .           26     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* odd         11      || ;           27     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* :=          14      || ident       12     *\n&quot;</span>; <span class="comment">//标识符号</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* +           15      || digit       13     *\n&quot;</span>; <span class="comment">//整型常数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* -           16      ||                    *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*********************************************\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;符号\t&quot;</span> &lt;&lt; <span class="string">&quot;种别码\t&quot;</span> &lt;&lt; <span class="string">&quot;说明&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; str1[i] != <span class="string">&#x27;\0&#x27;</span>;) &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果第一个字符为字母或下划线时，继续读取单词并判断是否为关键字</span></span><br><span class="line">        <span class="keyword">if</span>((str1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (str1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">while</span>((str1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (str1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) || (str1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) || str1[i] == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">                token[j++] = str1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            token[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( k = <span class="number">1</span>; k &lt; <span class="number">12</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(rwtab[k], token) == <span class="number">0</span>) <span class="comment">//关键词匹配</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; <span class="number">12</span>)</span><br><span class="line">                syn = k;<span class="comment">//种别码1-11为关键字</span></span><br><span class="line">            <span class="keyword">else</span> syn = <span class="number">12</span>;<span class="comment">//种别码12为自定义标识符</span></span><br><span class="line">        &#125;<span class="comment">//关键字和标识符处理</span></span><br><span class="line">        <span class="comment">//如果第一个字符为数字时继续读取数字直至结束，并输出对应的信息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(str1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; <span class="comment">//当读到第一个为0~9的数字时接着读之后的数字</span></span><br><span class="line">                num = num * <span class="number">10</span> + str1[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">//&#x27;9&#x27; - &#x27;&#x27; =9  ACSII码</span></span><br><span class="line">                token[j++] = str1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            syn = <span class="number">13</span>;<span class="comment">//种别码13为数字</span></span><br><span class="line">        &#125;<span class="comment">//数字在此处处理</span></span><br><span class="line">        <span class="comment">//除关键字及一般标识符和数字之外，其他字符只可能是界符或运算符</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//种别码14-27为间隔符与算符</span></span><br><span class="line">            <span class="keyword">if</span>(str1[i] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; str1[i + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">                syn = <span class="number">14</span>;</span><br><span class="line">                token[j++] = str1[i];</span><br><span class="line">                token[j++] = str1[++i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//分析每个间隔符并给出相应的种别码</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str1[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                syn = <span class="number">-1</span>;<span class="comment">//空格处理，种别码为-1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span>(str1[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">15</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">16</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">17</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">18</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">19</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">20</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">21</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">22</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">23</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">24</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">25</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">26</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;;&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">27</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                token[j++] = str1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        token[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(syn &gt; <span class="number">-1</span> &amp;&amp; syn &lt; <span class="number">12</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;关键字&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn == <span class="number">12</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;标识符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn &gt; <span class="number">13</span> &amp;&amp; syn &lt; <span class="number">23</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;算符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn &gt; <span class="number">22</span> &amp;&amp; syn &lt; <span class="number">28</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;界符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn == <span class="number">13</span>)</span><br><span class="line">            cout &lt;&lt; num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;常数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/01.jpg" alt="01"></p><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/02.jpg" alt="02"></p><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/03.jpg" alt="03"></p><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/04.jpg" alt="04"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理</title>
      <link href="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="图像的表示与描述"><a href="#图像的表示与描述" class="headerlink" title="图像的表示与描述"></a>图像的表示与描述</h3><h4 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h4><p>对纹理图像集利用灰度共生矩阵的二次统计量特征和最近邻法进行分类，其中每类纹理图像有8幅，总共64幅，每幅图像的大小为200x200。实验中将各类纹理图像样本按数量随机等分成两部分作为训练样本集和测试样本集，按照这种方式运行10 次对结果求平均分类正确率。观察不同的灰度共生矩阵对分类正确率的影响。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="（1）新建程序文件"><a href="#（1）新建程序文件" class="headerlink" title="（1）新建程序文件"></a>（1）新建程序文件</h5><h5 id="（2）编写程序如下"><a href="#（2）编写程序如下" class="headerlink" title="（2）编写程序如下"></a>（2）编写程序如下</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">percent=[];%正确率数组</span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">train=[];test=[];</span><br><span class="line">index=<span class="number">0</span>;%测试集下标</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">    P=randperm(<span class="number">8</span>);%随机序列</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        train&#123;i,j&#125;=<span class="built_in">strcat</span>(int2str(i),int2str(P(j)),<span class="string">&#x27;.jpg&#x27;</span>);%训练集</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">5</span>:<span class="number">8</span></span><br><span class="line">        index=index+<span class="number">1</span>;</span><br><span class="line">        test&#123;index&#125;=<span class="built_in">strcat</span>(int2str(i),int2str(P(j)),<span class="string">&#x27;.jpg&#x27;</span>);  %测试集</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">[M,N]=size(train);%训练集大小</span><br><span class="line">X=[];</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:N</span><br><span class="line">        name=<span class="type">char</span>(train(i,j));</span><br><span class="line">        img_train=imread(name);%读取训练集图片</span><br><span class="line">        glcm=graycomatrix(img_train,<span class="string">&#x27;Offset&#x27;</span>,[<span class="number">-1</span> <span class="number">-1</span>],<span class="string">&#x27;NumLevels&#x27;</span>,<span class="number">4</span>);%计算灰度共生矩阵,<span class="number">135</span>度方向,d=<span class="number">1</span>,量化级数<span class="number">4</span></span><br><span class="line">        stats = graycoprops(glcm, <span class="string">&#x27;all&#x27;</span>);%对比度、相关、能量、均匀度</span><br><span class="line">        out= entropy(img_train); %整幅图的熵</span><br><span class="line">        X(i,j,:)=[stats.Contrast,stats.Correlation,stats.Energy,stats.Homogeneity,out];%训练集特征向量</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">truenum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:index</span><br><span class="line">    x=[];</span><br><span class="line">    name=<span class="type">char</span>(test(i));</span><br><span class="line">    img_test=imread(name);%读取测试集图片</span><br><span class="line">    glcm=graycomatrix(img_test,<span class="string">&#x27;Offset&#x27;</span>,[<span class="number">-1</span> <span class="number">-1</span>],<span class="string">&#x27;NumLevels&#x27;</span>,<span class="number">4</span>);%计算灰度共生矩阵,<span class="number">135</span>度方向,d=<span class="number">1</span>,量化级数<span class="number">4</span></span><br><span class="line">    stats = graycoprops(glcm, <span class="string">&#x27;all&#x27;</span>);%对比度、相关、能量、均匀度</span><br><span class="line">    out= entropy(img_train); %整幅图的熵</span><br><span class="line">    x=[stats.Contrast,stats.Correlation,stats.Energy,stats.Homogeneity,out];%测试集特征向量</span><br><span class="line">    gix=[];</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:M</span><br><span class="line">        odist=[];%第j类的欧式距离数组</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span>:N</span><br><span class="line">            a=X(j,k,:);</span><br><span class="line">            a=a(:)<span class="string">&#x27;;%训练集特征向量</span></span><br><span class="line"><span class="string">            odist(k)=norm(a-x);%求欧氏距离</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        gix(j)=min(odist);%第j类中最小欧氏距离</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    [gjx,mindex]=min(gix);%最小欧氏距离及其类别</span></span><br><span class="line"><span class="string">    fprintf(&#x27;</span>%s属于第%d类    <span class="string">&#x27;,name,mindex);</span></span><br><span class="line"><span class="string">    if mod(i,4)==0</span></span><br><span class="line"><span class="string">        fprintf(&#x27;</span>\n<span class="number">&#x27;</span>);%每四个换一次行</span><br><span class="line">    end</span><br><span class="line">    num=str2num(name(<span class="number">1</span>));%正确的类别</span><br><span class="line">    <span class="keyword">if</span> num==mindex</span><br><span class="line">        truenum=truenum+<span class="number">1</span>;%求分类正确的数量</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"><span class="title function_">percent</span><span class="params">(n)</span>=truenum/<span class="number">32</span>;%求分类正确率</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="string">&#x27;正确率为：%f\n&#x27;</span>,percent(n));</span><br><span class="line">end</span><br><span class="line"><span class="title function_">fprintf</span><span class="params">(<span class="string">&#x27;10次平均正确率为：%f\n&#x27;</span>,mean(percent))</span>;%求平均分类正确率</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据记录："><a href="#数据记录：" class="headerlink" title="数据记录："></a>数据记录：</h4><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/02.jpg" alt="01"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/03.jpg" alt="03"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/04.jpg" alt="04"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/05.jpg" alt="05"></p><h5 id="问题讨论："><a href="#问题讨论：" class="headerlink" title="问题讨论："></a>问题讨论：</h5><p>纹理特征不是基于像素点的特征，它需要在包含多个像素点的区域中进行统计计算。在图像模式识别的模式匹配时，此类区域性的特征具有一定的优势。可以避 免由手局部的偏差造成匹配失败。作为一种统计特征，纹理特征一般具有旋转不变性，并且 对于噪声有较强的抵抗能力。但是，纹理特征也有其缺点。当图像的分辦率变化时，所计算出来的纹理可能会有较大的偏差，从2D图像反映出来的纹理不一定是3D物体表面真实的纹理。</p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/04/11/Python/"/>
      <url>/2023/04/11/Python/</url>
      
        <content type="html"><![CDATA[<h3 id="入门练习"><a href="#入门练习" class="headerlink" title="入门练习"></a>入门练习</h3><h5 id="Fibonacci斐波那契数列"><a href="#Fibonacci斐波那契数列" class="headerlink" title="Fibonacci斐波那契数列"></a>Fibonacci斐波那契数列</h5><p>问题描述：Fibonacci数列的递推公式为：Fn&#x3D;Fn-1+Fn-2，其中F1&#x3D;F2&#x3D;1。<br>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。<br>输入格式:<br>输入包含一个整数n。<br>输出格式:<br>输出一行，包含一个整数，表示Fn除以10007的余数。</p><p>样例输入:10<br>样例输出:55<br>样例输入:22<br>样例输出:7704<br>数据规模与约定:1 &lt;&#x3D; n &lt;&#x3D; 1,000,000。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">F1, F2 = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">    F1, F2 = F2 % <span class="number">10007</span>, (F1+F2) % <span class="number">10007</span></span><br><span class="line">    <span class="built_in">print</span>(F1, F2)</span><br><span class="line"><span class="built_in">print</span>(F2)</span><br><span class="line"><span class="comment"># 先用递归计算斐波那契数列的值再取余数会超时</span></span><br></pre></td></tr></table></figure><h5 id="圆的面积"><a href="#圆的面积" class="headerlink" title="圆的面积"></a>圆的面积</h5><p>问题描述<br>给定圆的半径r，求圆的面积。<br>输入格式<br>输入包含一个整数r，表示圆的半径。<br>输出格式<br>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br>说明：在本题中，输入是一个整数，但是输出是一个实数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">area = math.pi*r*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.7f&quot;</span> % s)</span><br></pre></td></tr></table></figure><h5 id="序列求和"><a href="#序列求和" class="headerlink" title="序列求和"></a>序列求和</h5><p>问题描述<br>求1+2+3+…+n的值。<br>输入格式<br>输入包括一个整数n。<br>输出格式<br>输出一行，包括一个整数，表示1+2+3+…+n的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0.5</span>*n*n + <span class="number">0.5</span>*n <span class="comment"># 直接用公式求和，迭代求和耗时久</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><h5 id="A-B问题"><a href="#A-B问题" class="headerlink" title="A+B问题"></a>A+B问题</h5><p>输入A、B，输出A+B。<br>说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。<br>输入格式<br>输入的第一行包括两个整数，由空格分隔，分别表示A、B。<br>说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。<br>做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。<br>在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。<br>输出格式<br>输出一行，包括一个整数，表示A+B的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A, B = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(A+B)</span><br></pre></td></tr></table></figure><h3 id="基础练习"><a href="#基础练习" class="headerlink" title="基础练习"></a>基础练习</h3><h5 id="数列排序"><a href="#数列排序" class="headerlink" title="数列排序"></a>数列排序</h5><p>问题描述：<br>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200</p><p>输入格式：<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出格式：<br>　　输出一行，按从小到大的顺序输出排序后的数列。</p><p>样例输入：<br>5<br>8 3 6 4 9<br>样例输出：<br>3 4 6 8 9</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt;= n &lt;= <span class="number">100</span>:</span><br><span class="line">    null_List = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    null_List.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(null_List)):</span><br><span class="line">        <span class="built_in">print</span>(null_List[i], end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="十六进制转八进制"><a href="#十六进制转八进制" class="headerlink" title="十六进制转八进制"></a>十六进制转八进制</h5><p>问题描述：给定n个十六进制正整数，输出它们对应的八进制数。</p><p>输入格式：<br>　　输入的第一行为一个正整数n （1&lt;&#x3D;n&lt;&#x3D;10）。<br>　　接下来n行，每行一个由0-9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。<br>输出格式：<br>　　输出n行，每行为输入对应的八进制正整数。</p><p>【注意】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p><p>样例输入<br>　　2<br>　　39<br>　　123ABC<br>样例输出<br>　　71<br>　　4435274　　　　</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin:转换成2进制 oct:转换成8进制 hex:转换成16进制 int:十进制</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">10</span>:</span><br><span class="line">        s=<span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">100000</span>:</span><br><span class="line">            res_1 = <span class="built_in">int</span>(s, <span class="number">16</span>)<span class="comment"># 把十六进制的s转换成十进制</span></span><br><span class="line">            res_2 = <span class="built_in">oct</span>(res_1)</span><br><span class="line">            li.append(res_2[<span class="number">2</span>:])<span class="comment"># 从第三位开始取</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="查找整数"><a href="#查找整数" class="headerlink" title="查找整数"></a>查找整数</h5><p>问题描述：<br>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。<br>输入格式：<br>第一行包含一个整数n。<br>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。<br>第三行包含一个整数a，为待查找的数。<br>输出格式：<br>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。<br>样例输入：<br>6<br>1 9 4 8 3 9<br>9<br>样例输出：<br>2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">if</span> a==nums[i]:</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">len</span>(nums)-<span class="number">1</span> <span class="keyword">and</span> a!=nums[i]:</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h5><p>问题描述：<br>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。　　<br>下面给出了杨辉三角形的前4行：　　<br>1　　<br>1 1　　<br>1 2 1<br>1 3 3 1　　<br>给出n，输出它的前n行。<br>输入格式：<br>输入包含一个数n。<br>输出格式：<br>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。<br>样例输入：<br>4<br>样例输出：<br>1<br>1 1<br>1 2 1<br>1 3 3 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[[<span class="number">0</span>]*n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">            nums[i][j]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i][j]=nums[i-<span class="number">1</span>][j-<span class="number">1</span>]+nums[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">if</span> nums[i][j]!=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(nums[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
