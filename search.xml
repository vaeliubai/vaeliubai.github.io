<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理实验二</title>
      <link href="/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="实验二：语法分析"><a href="#实验二：语法分析" class="headerlink" title="实验二：语法分析"></a>实验二：语法分析</h3><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><p>实现算术表达式的语法分析器</p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p>1、PL&#x2F;0文法：</p><p>在词法规则基础上，引入一组非终结符和产生式集合构成PL&#x2F;0语言的上下文无关文法。</p><p><code>VN = &#123; program, block, statement, condition, expression, term, factor &#125;</code></p><p>其中：<mark class="hl-label blue">program</mark> 为开始符号；</p><p><code>VT = &#123; ident, number, &quot;const&quot;, &quot;var&quot;, &quot;procedure&quot;, &quot;call&quot;, &quot;begin&quot;, &quot;end&quot;, &quot;if&quot;, &quot;then&quot;, &quot;while&quot;, &quot;do&quot;, &quot;odd&quot;, &quot;.&quot;, &quot;,&quot;, &quot;=&quot;, &quot;;&quot;, &quot;:=&quot;, &quot;#&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;(&quot;, &quot;)&quot; &#125;</code></p><p>其中：<mark class="hl-label green">ident</mark> 代表标识符，<mark class="hl-label pink">number</mark> 代表数值，双引号括起来的符号是源程序中出现的原始字符串（包括关键字、算符等），每个对应一个单词种别。</p><p>下面给出<strong>消除左递归</strong>和<strong>回溯的PL&#x2F;0的EBNF文法</strong>，作为构造递归下降分析程序时的参考。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">program → block <span class="string">&quot;.&quot;</span></span><br><span class="line"></span><br><span class="line">block → constdecl vardecl procdecl statement</span><br><span class="line"></span><br><span class="line">constdecl → [<span class="string">&quot;const&quot;</span> constitem &#123;<span class="string">&quot;,&quot;</span> constitem&#125; <span class="string">&quot;;&quot;</span>] </span><br><span class="line"></span><br><span class="line">constitem → ident <span class="string">&quot;=&quot;</span> number</span><br><span class="line"></span><br><span class="line">vardecl → [<span class="string">&quot;var&quot;</span> ident &#123;<span class="string">&quot;,&quot;</span> ident&#125; <span class="string">&quot;;&quot;</span>] </span><br><span class="line"></span><br><span class="line">procdecl → &#123;<span class="string">&quot;procedure&quot;</span> ident <span class="string">&quot;;&quot;</span> block <span class="string">&quot;;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">statement → assignstmt </span><br><span class="line"></span><br><span class="line">​    | callstmt </span><br><span class="line"></span><br><span class="line">​    | compstmt </span><br><span class="line"></span><br><span class="line">​    | ifstmt </span><br><span class="line"></span><br><span class="line">​    | whilestmt</span><br><span class="line"></span><br><span class="line">assignstmt → [ident <span class="string">&quot;:=&quot;</span> expression]</span><br><span class="line"></span><br><span class="line">callstmt → [<span class="string">&quot;call&quot;</span> ident]</span><br><span class="line"></span><br><span class="line">compstmt → [<span class="string">&quot;begin&quot;</span> statement &#123;<span class="string">&quot;;&quot;</span> statement&#125; <span class="string">&quot;end&quot;</span>]</span><br><span class="line"></span><br><span class="line">ifstmt → [<span class="string">&quot;if&quot;</span> condition <span class="string">&quot;then&quot;</span> statement]</span><br><span class="line"></span><br><span class="line">whilestmt → [<span class="string">&quot;while&quot;</span> condition <span class="string">&quot;do&quot;</span> statement]</span><br><span class="line"></span><br><span class="line">condition = <span class="string">&quot;odd&quot;</span> expression </span><br><span class="line"></span><br><span class="line">​    | expression (<span class="string">&quot;=&quot;</span>|<span class="string">&quot;#&quot;</span>|<span class="string">&quot;&lt;&quot;</span>|<span class="string">&quot;&gt;&quot;</span>) expression</span><br><span class="line"></span><br><span class="line">expression → term &#123; (<span class="string">&quot;+&quot;</span>|<span class="string">&quot;-&quot;</span>) term&#125;</span><br><span class="line"></span><br><span class="line">term → factor &#123;(<span class="string">&quot;*&quot;</span>|<span class="string">&quot;/&quot;</span>) factor&#125;</span><br><span class="line"></span><br><span class="line">factor → [ <span class="string">&quot;+&quot;</span>|<span class="string">&quot;-&quot;</span>] (ident | number | <span class="string">&quot;(&quot;</span> expression <span class="string">&quot;)&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><p>（1）按照EBNF文法设计语法分析程序的整体结构；</p><p>（2）针对每个语法单位编写相应的子程序，完成递归下降分析程序。</p><h4 id="实验数据记录"><a href="#实验数据记录" class="headerlink" title="实验数据记录"></a>实验数据记录</h4><p>写出给定文法中每个非终结符的FIRST和FOLLOW集。</p><p><strong>FIRST集</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">program= &#123;<span class="type">const</span>, var,.,ident, ε ,call,begin,<span class="keyword">if</span>,<span class="keyword">while</span>&#125;</span><br><span class="line">block=&#123;<span class="type">const</span>,var,ident, ε,call,begin,<span class="keyword">if</span>,<span class="keyword">while</span>&#125;</span><br><span class="line">statement=&#123;ident, ε,call,begin,<span class="keyword">if</span>,<span class="keyword">while</span>&#125;</span><br><span class="line">condition=&#123;odd&#125;</span><br><span class="line">expression=&#123;+,-&#125;</span><br><span class="line">term=&#123;+,-&#125;</span><br><span class="line">factor=&#123;+,-&#125;</span><br><span class="line">constdecl=&#123;<span class="type">const</span>, ε&#125;</span><br><span class="line">vardecl=&#123;var, ε&#125;</span><br><span class="line">procdecl=&#123;procedure, ε&#125;</span><br><span class="line">constitem=&#123;ident&#125;</span><br><span class="line">assignstmt=&#123;ident, ε&#125;</span><br><span class="line">callstmt=&#123;call, ε&#125;</span><br><span class="line">compstmt=&#123;begin, ε&#125;</span><br><span class="line">ifstmt=&#123;<span class="keyword">if</span>, ε&#125;</span><br><span class="line">whilestmt=&#123;<span class="keyword">if</span>, ε&#125;</span><br></pre></td></tr></table></figure><p><strong>FOLLOW集：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">program=&#123;#&#125;</span><br><span class="line">block=&#123;.,then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / , ε, &#123; , &#125; , ; ,end&#125;</span><br><span class="line">constdecl=&#123;<span class="type">const</span>,.,then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / , ε, &#123; , &#125; , ; ,end&#125;</span><br><span class="line">constitem=&#123;, , ;&#125;</span><br><span class="line">vardecl=&#123;.,then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / , ε, &#123; , &#125; , ; ,end&#125;</span><br><span class="line">procdecl=&#123;procedure ε&#125;</span><br><span class="line">statement=&#123;.,then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / , ε, &#123; , &#125; , ; ,end&#125;</span><br><span class="line">assignstmt=&#123;then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / &#125;</span><br><span class="line">callstmt=&#123; ε&#125;</span><br><span class="line">compstmt=&#123; ε&#125;</span><br><span class="line">ifstmt=&#123;.,then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / , ε, &#123; , &#125; , ; ,end&#125;</span><br><span class="line">whilestmt=&#123;.,then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / , ε, &#123; , &#125; , ; ,end&#125;</span><br><span class="line">condition=&#123;then,<span class="keyword">do</span>,= , # ,&lt; , &gt; ,+ , - , ）, * , / &#125;</span><br><span class="line">expression=&#123;then,<span class="keyword">do</span>, = , # ,&lt; , &gt; ,+ , - , ）, * , / &#125;</span><br><span class="line">term=&#123;+ , - ,= , # ,&lt; , &gt; , ) , * , / ,then,<span class="keyword">do</span>&#125;</span><br><span class="line">factor=&#123;+ , - ,= , # ,&lt; , &gt; , ) , * , / ,then,<span class="keyword">do</span>&#125;</span><br></pre></td></tr></table></figure><p>语法分析的结果</p><p><img src="/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/1.png"></p><p><img src="/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/2.png"></p><p><img src="/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/3.png"></p><p><img src="/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/4.png"></p><p><img src="/2023/06/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C/5.png"></p><p>写出一段有代表性的程序并加以说明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_constdecl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;const&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;const&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_constitem</span>();</span><br><span class="line">        <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">match</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">parse_constitem</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_constitem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_ident</span>();</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_number</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_vardecl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;var&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;var&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_ident</span>();</span><br><span class="line">        <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">match</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">parse_ident</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_procdecl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;procedure&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;procedure&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_ident</span>();</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_block</span>();</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这段程序是一个编译器的语法分析器，用于解析代码中的常量、变量和过程声明。其中包括以下几个函数：</span></span><br><span class="line"><span class="comment">parse_constdecl():用于解析代码中的常量声明。它会首先匹配关键字 &quot;const&quot;，然后循环调用parse_constitem()函数解析每个常量项，每个常量项之间用逗号隔开，并以分号结尾。</span></span><br><span class="line"><span class="comment">parse_constitem():用于解析每个常量项，它首先调用parse_ident()函数解析常量名，然后匹配等号 &quot;=&quot;，最后调用 parse_number() 函数解析常量值。</span></span><br><span class="line"><span class="comment">parse_vardecl():用于解析代码中的变量声明。它会首先匹配关键字&quot;var&quot;,然后循环调用parse_ident()函数解析每个变量名，每个变量名之间用逗号隔开，并以分号结尾。</span></span><br><span class="line"><span class="comment">parse_procdecl():用于解析代码中的过程声明。它会循环匹配关键字 &quot;procedure&quot;，然后调用parse_ident()函数解析过程名，接着匹配分号 &quot;;&quot;，然后调用 parse_block()函数解析过程体部分，最后再匹配分号&quot;;&quot;。</span></span><br><span class="line"><span class="comment">上述几个函数中都调用了其他辅助函数，例如 parse_ident() 用于解析标识符，match() 用于匹配关键字和符号等。这段程序可以作为一个基础框架，可以根据具体语言的语法规则进行适当修改以实现完整的语法分析功能。*/</span></span><br></pre></td></tr></table></figure><h4 id="源代码（仅供参考）"><a href="#源代码（仅供参考）" class="headerlink" title="源代码（仅供参考）"></a>源代码（仅供参考）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数列表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isIdentifier</span><span class="params">(string s)</span></span>;<span class="comment">//标识符</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isKeywords</span><span class="params">(string s)</span></span>;  <span class="comment">//关键字</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDigit</span><span class="params">(string s)</span></span>;     <span class="comment">//整型数字</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(string s)</span></span>;  <span class="comment">//多字符运算符</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span></span>;    <span class="comment">//单字符运算符</span></span><br><span class="line"><span class="function">string <span class="title">result</span><span class="params">(string s)</span></span>;    <span class="comment">//根据传入的参数s产生对应的输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数实现</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isIdentifier</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isKeywords</span>(s)) <span class="comment">//标识符不能是关键字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((s[<span class="number">0</span>] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">&#x27;z&#x27;</span>) || (s[<span class="number">0</span>] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">&#x27;Z&#x27;</span>))   <span class="comment">//首字母必须是字母</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)    <span class="comment">//非首字母能为字母或数字</span></span><br><span class="line">                    || (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isKeywords</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> vector&lt;string&gt; keyVec = &#123; <span class="string">&quot;begin&quot;</span> , <span class="string">&quot;end&quot;</span> , <span class="string">&quot;if&quot;</span> , <span class="string">&quot;then&quot;</span> , <span class="string">&quot;while&quot;</span> , <span class="string">&quot;do&quot;</span> , <span class="string">&quot;const&quot;</span> ,<span class="string">&quot;var&quot;</span> , <span class="string">&quot;call&quot;</span> , <span class="string">&quot;procedure&quot;</span> , <span class="string">&quot;odd&quot;</span> &#125;;  <span class="comment">//PL/0的关键字列表</span></span><br><span class="line">    vector&lt;string&gt;::iterator result = <span class="built_in">find</span>(keyVec.<span class="built_in">begin</span>(), keyVec.<span class="built_in">end</span>(), s);    <span class="comment">//查找字符串是否存在关键词列表中</span></span><br><span class="line">    <span class="keyword">if</span> (result != keyVec.<span class="built_in">end</span>()) <span class="comment">//如果结果不为end则存在，也即该词为关键字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDigit</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="comment">//首字符为数字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">length</span>(); ++i)    <span class="comment">//后面字符也为数字</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> vector&lt;string&gt; opeVec = &#123; <span class="string">&quot;+&quot;</span> , <span class="string">&quot;-&quot;</span> , <span class="string">&quot;*&quot;</span> , <span class="string">&quot;/&quot;</span> , <span class="string">&quot;=&quot;</span>, <span class="string">&quot;#&quot;</span> , <span class="string">&quot;&lt;&quot;</span> , <span class="string">&quot;&gt;&quot;</span> , <span class="string">&quot;:=&quot;</span> , <span class="string">&quot;(&quot;</span> , <span class="string">&quot;)&quot;</span> , <span class="string">&quot;,&quot;</span> , <span class="string">&quot;.&quot;</span> , <span class="string">&quot;;&quot;</span> &#125;;   <span class="comment">//PL/0的运算符列表</span></span><br><span class="line">    vector&lt;string&gt;::iterator result = <span class="built_in">find</span>(opeVec.<span class="built_in">begin</span>(), opeVec.<span class="built_in">end</span>(), s);    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (result != opeVec.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> vector&lt;<span class="type">char</span>&gt; opeVec = &#123; <span class="string">&#x27;+&#x27;</span> , <span class="string">&#x27;-&#x27;</span> , <span class="string">&#x27;*&#x27;</span> , <span class="string">&#x27;/&#x27;</span> , <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;#&#x27;</span> , <span class="string">&#x27;&lt;&#x27;</span> , <span class="string">&#x27;&gt;&#x27;</span> , <span class="string">&#x27;(&#x27;</span> , <span class="string">&#x27;)&#x27;</span> , <span class="string">&#x27;,&#x27;</span> , <span class="string">&#x27;.&#x27;</span> , <span class="string">&#x27;;&#x27;</span> , <span class="string">&#x27;:&#x27;</span> &#125;;    <span class="comment">//PL/0的单字符运算符列表,其中单字:应也算为合法</span></span><br><span class="line">    vector&lt;<span class="type">char</span>&gt;::iterator result = <span class="built_in">find</span>(opeVec.<span class="built_in">begin</span>(), opeVec.<span class="built_in">end</span>(), c);</span><br><span class="line">    <span class="keyword">if</span> (result != opeVec.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">result</span><span class="params">(string s)</span> <span class="comment">//根据传入的参数s产生对应的输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//种别码</span></span><br><span class="line">    <span class="comment">//1.标识符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isIdentifier</span>(s))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;标识符——12,&quot;</span> + s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.整型常量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isDigit</span>(s))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;整型常量——13,&quot;</span> + s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立静态字典</span></span><br><span class="line">    <span class="type">static</span> map&lt;string, string&gt; WordsDictionary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关键字</span></span><br><span class="line">    WordsDictionary[<span class="string">&quot;begin&quot;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;end&quot;</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;if&quot;</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;then&quot;</span>] = <span class="string">&quot;4&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;while&quot;</span>] = <span class="string">&quot;5&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;do&quot;</span>] = <span class="string">&quot;6&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;const&quot;</span>] = <span class="string">&quot;7&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;var&quot;</span>] = <span class="string">&quot;8&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;call&quot;</span>] = <span class="string">&quot;9&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;procedure&quot;</span>] = <span class="string">&quot;10&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;odd&quot;</span>] = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isKeywords</span>(s))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;关键字——&quot;</span> + WordsDictionary[s] + <span class="string">&quot;,&quot;</span> + s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.运算符</span></span><br><span class="line">    WordsDictionary[<span class="string">&quot;+&quot;</span>] = <span class="string">&quot;15&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;-&quot;</span>] = <span class="string">&quot;16&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;*&quot;</span>] = <span class="string">&quot;17&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;/&quot;</span>] = <span class="string">&quot;18&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;=&quot;</span>] = <span class="string">&quot;19&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;#&quot;</span>] = <span class="string">&quot;20&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;&lt;&quot;</span>] = <span class="string">&quot;21&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;&gt;&quot;</span>] = <span class="string">&quot;22&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;:=&quot;</span>]=<span class="string">&quot;14&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;(&quot;</span>] = <span class="string">&quot;23&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;)&quot;</span>] = <span class="string">&quot;24&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;,&quot;</span>] = <span class="string">&quot;25&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;.&quot;</span>] = <span class="string">&quot;26&quot;</span>;</span><br><span class="line">    WordsDictionary[<span class="string">&quot;;&quot;</span>] = <span class="string">&quot;27&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isOperator</span>(s))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;运算符——&quot;</span> + WordsDictionary[s] + <span class="string">&quot;,&quot;</span> + s;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析词法将其记录下来，用于语法分析</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">LexicalAnalysis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string file = (<span class="string">&quot;D:\\Desktop\\in.txt&quot;</span>);</span><br><span class="line">    <span class="function">ifstream <span class="title">input</span><span class="params">(file)</span></span>;   <span class="comment">//输入文件流,注意编码，文本文件编码格式需和项目一直，否则乱码</span></span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">output</span><span class="params">(<span class="string">&quot;D:\\Desktop\\out.txt&quot;</span>, ofstream::app)</span></span>;</span><br><span class="line">    string copy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getline</span>(input, copy, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; copy &lt;&lt; endl;   <span class="comment">//测试是否正确</span></span><br><span class="line"></span><br><span class="line">    input.<span class="built_in">close</span>();</span><br><span class="line">    input.<span class="built_in">open</span>(file);   <span class="comment">//此时input已经指到了文件尾，为了后面的读取，需要关闭再打开</span></span><br><span class="line"></span><br><span class="line">    output &lt;&lt; <span class="string">&quot;原数据:\n&quot;</span>;</span><br><span class="line">    output &lt;&lt; copy &lt;&lt; endl;</span><br><span class="line">    output &lt;&lt; <span class="string">&quot;处理后结果:\n&quot;</span>;   <span class="comment">//测试结果要求以原数据与结果对照的形式输出并保存在out.txt中，同时要把结果输出到屏幕。</span></span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line">    string words;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;处理后结果:\n&quot;</span>;</span><br><span class="line">    <span class="type">bool</span> skip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; AllWords;    <span class="comment">//记录所有被识别的单词</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(input, str)) <span class="comment">//读取文件每一次读取一行,遇到EOF结束</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">istringstream <span class="title">strCin</span><span class="params">(str)</span></span>;  <span class="comment">//从输入流中获取单词，需要用到输入流对象，即istringstream</span></span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">if</span> (skip)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.<span class="built_in">find</span>(<span class="string">&quot;*)&quot;</span>) != <span class="number">-1</span>)</span><br><span class="line">                skip = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (strCin &gt;&gt; words)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (words == <span class="string">&quot;//&quot;</span>)  <span class="comment">//跳过注释</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (words == <span class="string">&quot;(*&quot;</span> || words == <span class="string">&quot;*)&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                skip = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*注意处理逗号，比如int a,b;这里有一个单词&quot;a,b;”,所以要处理一个字符串里面的各种运算符,但是这样会很麻烦，</span></span><br><span class="line"><span class="comment">            发现没有，用ide写代码写完一句输入分号时，ide会自动加入空格，这样就方便处理多了*/</span></span><br><span class="line">            <span class="comment">//1.首先可以确定的是关键字肯定是单独作为一个单词的</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isKeywords</span>(words))</span><br><span class="line">            &#123;</span><br><span class="line">                s = <span class="built_in">result</span>(words);</span><br><span class="line">                AllWords.<span class="built_in">push_back</span>(words);  <span class="comment">//记录关键字</span></span><br><span class="line">                cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">                output &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2,对单词进行扫描，肯定是标识符，运算符，逗号分号,数字等等混合在一起的单词</span></span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; index = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">length</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//运算符有两位的，比如&quot;&lt;=&quot;,&quot;&gt;=&quot;,&quot;==&quot;,&quot;!=&quot;</span></span><br><span class="line">                <span class="keyword">if</span> ((i &lt; words.<span class="built_in">length</span>() - <span class="number">1</span>) &amp;&amp; <span class="built_in">isOperator</span>(words[i]) &amp;&amp; <span class="built_in">isOperator</span>(words[i + <span class="number">1</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//但是要注意只有以上四种两位运算符，比如+-,))就不是,但是))还是要输出),)</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">string</span>(words.<span class="built_in">begin</span>() + i, words.<span class="built_in">begin</span>() + i + <span class="number">2</span>) == <span class="string">&quot;:=&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">find</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), i) == index.<span class="built_in">end</span>()) <span class="comment">//避免重复下标</span></span><br><span class="line">                            index.<span class="built_in">push_back</span>(i);</span><br><span class="line">                        index.<span class="built_in">push_back</span>(i + <span class="number">2</span>);</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isOperator</span>(words[i]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">find</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), i) == index.<span class="built_in">end</span>())</span><br><span class="line">                            index.<span class="built_in">push_back</span>(i);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">find</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), i + <span class="number">1</span>) == index.<span class="built_in">end</span>())</span><br><span class="line">                            index.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//逗号，运算符作为分隔</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isOperator</span>(words[i]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">find</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), i) == index.<span class="built_in">end</span>())</span><br><span class="line">                        <span class="comment">//比如遇到&quot;a,b&quot;这里下标0和1将a分开，1到2将逗号分开，2到3将b分开</span></span><br><span class="line">                        index.<span class="built_in">push_back</span>(i);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">find</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), i + <span class="number">1</span>) == index.<span class="built_in">end</span>())</span><br><span class="line">                        index.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//如果是a&lt;=b这样的呢？一样，先0和1将a分开，1和2将&lt;分开，2和3将=分开</span></span><br><span class="line">                    <span class="comment">//3和4将b分开，然后后面分隔单词时，注意如果相邻都是运算符，则忽略，比如</span></span><br><span class="line">                    <span class="comment">//后面判断到1和2，2和3都是运算符，则忽略2</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    string rel;</span><br><span class="line">                    <span class="comment">//比如遇到&quot;&lt;=&quot;，需要提取”&lt;=“</span></span><br><span class="line">                    <span class="comment">/*if (isOperator(words[index[i]]) &amp;&amp; isOperator(words[index[i + 1]]))</span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                        rel = result(string(words.begin() + index[i], words.begin() + index[i + 2]));</span></span><br><span class="line"><span class="comment">                        ++i;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    else*/</span></span><br><span class="line">                    rel = <span class="built_in">result</span>(<span class="built_in">string</span>(words.<span class="built_in">begin</span>() + index[i], words.<span class="built_in">begin</span>() + index[i + <span class="number">1</span>]));</span><br><span class="line">                    AllWords.<span class="built_in">push_back</span>(<span class="built_in">string</span>(words.<span class="built_in">begin</span>() + index[i], words.<span class="built_in">begin</span>() + index[i + <span class="number">1</span>])); <span class="comment">//记录单词</span></span><br><span class="line">                    output &lt;&lt; rel &lt;&lt; endl;</span><br><span class="line">                    cout &lt;&lt; rel &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index.<span class="built_in">size</span>() == <span class="number">1</span>)  <span class="comment">//考虑一下是不是标识符</span></span><br><span class="line">            &#123;</span><br><span class="line">                string rel;</span><br><span class="line">                rel = <span class="built_in">result</span>(words);</span><br><span class="line">                AllWords.<span class="built_in">push_back</span>(words);<span class="comment">//记录标识符</span></span><br><span class="line">                output &lt;&lt; rel &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; rel &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    output.<span class="built_in">close</span>();</span><br><span class="line">    input.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> AllWords;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//token数据及下标定义</span></span><br><span class="line">vector&lt;string&gt; tokens = <span class="built_in">LexicalAnalysis</span>();</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> success = <span class="literal">true</span>;</span><br><span class="line">string symbolarray[] = &#123; <span class="string">&quot;=&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> symbollength = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//对实验文档中的消除左递归和回溯的PL/0的EBNF文法分析</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    program：程序，由 block 和 &quot;.&quot; 组成。</span></span><br><span class="line"><span class="comment">    block：代码块，包含 constdecl、vardecl、procdecl 和 statement 四部分。</span></span><br><span class="line"><span class="comment">    constdecl：常量声明，由可选的 &quot;const&quot; 关键字，多个 constitem，以及 &quot;;&quot; 组成。</span></span><br><span class="line"><span class="comment">    constitem：常量条目，包括标识符 ident 和数字 number 之间的 &quot;=&quot; 号连接。</span></span><br><span class="line"><span class="comment">    vardecl：变量声明，由可选的 &quot;var&quot; 关键字，多个标识符 ident，以及 &quot;;&quot; 组成。</span></span><br><span class="line"><span class="comment">    procdecl：过程声明，由多个 &quot;procedure&quot; 关键字，标识符 ident，代码块 block 和 &quot;;&quot; 组成。</span></span><br><span class="line"><span class="comment">    statement：语句，包括赋值语句 assignstmt、过程调用语句 callstmt、复合语句 compstmt、条件语句 ifstmt 和循环语句 whilestmt。</span></span><br><span class="line"><span class="comment">    assignstmt：赋值语句，包括标识符 ident，&quot;:=&quot; 连接后面的 expression。</span></span><br><span class="line"><span class="comment">    callstmt：过程调用语句，包括 &quot;call&quot; 关键字和标识符 ident。</span></span><br><span class="line"><span class="comment">    compstmt：复合语句，由 &quot;begin&quot; 关键字和多个语句 statement，以及 &quot;end&quot; 关键字组成。</span></span><br><span class="line"><span class="comment">    ifstmt：条件语句，由 &quot;if&quot; 关键字、condition、&quot;then&quot; 关键字和语句 statement 组成。</span></span><br><span class="line"><span class="comment">    whilestmt：循环语句，由 &quot;while&quot; 关键字、condition、&quot;do&quot; 关键字和语句 statement 组成。</span></span><br><span class="line"><span class="comment">    condition：条件判断，包括 &quot;odd&quot; 和 expression 之间的关系运算符（&quot;=&quot;、&quot;#&quot;、&quot;&lt;&quot;、&quot;&gt;&quot;）。</span></span><br><span class="line"><span class="comment">    expression：表达式，由 term 和多个加减法运算符组成。</span></span><br><span class="line"><span class="comment">    term：项，由 factor 和多个乘除法运算符组成。</span></span><br><span class="line"><span class="comment">    factor：因子，包括可选的正负号、标识符 ident、数字 number 和括号中的 expression。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//函数列表，注释为对应语法单位</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exception_print</span><span class="params">(<span class="type">int</span> type, string expected)</span></span>;    <span class="comment">//打印异常</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">(string expected)</span></span>;           <span class="comment">//单输入匹配函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">(string expected, <span class="type">bool</span> majority)</span></span>;             <span class="comment">//多输入匹配函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_program</span><span class="params">()</span></span>;   <span class="comment">//program -&gt; block &quot;.&quot;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_block</span><span class="params">()</span></span>;     <span class="comment">//block -&gt; constdecl vardecl procdecl statement</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_constdecl</span><span class="params">()</span></span>; <span class="comment">//constdecl -&gt;[&quot;const&quot; constitem&#123; &quot;,&quot; constitem &#125; &quot;;&quot;]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_constitem</span><span class="params">()</span></span>; <span class="comment">//constitem -&gt; ident &quot;=&quot; number</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_vardecl</span><span class="params">()</span></span>;   <span class="comment">//vardecl -&gt; [&quot;var&quot; ident &#123;&quot;,&quot; ident&#125; &quot;;&quot;]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_procdecl</span><span class="params">()</span></span>;  <span class="comment">//procdecl -&gt; &#123;&quot;procedure&quot; ident &quot;;&quot; block &quot;;&quot;&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_statement</span><span class="params">()</span></span>; <span class="comment">//statement -&gt; assignstmt | callstmt | compstmt | ifstmt | whilestmt</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_assignstmt</span><span class="params">()</span></span>;<span class="comment">//assignstmt -&gt;[ident &quot;:=&quot; expression]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_callstmt</span><span class="params">()</span></span>;  <span class="comment">//callstmt -&gt; [&quot;call&quot; ident]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_compstmt</span><span class="params">()</span></span>;  <span class="comment">//compstmt -&gt; [&quot;begin&quot; statement &#123;&quot;;&quot; statement&#125; &quot;end&quot;]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_ifstmt</span><span class="params">()</span></span>;    <span class="comment">//ifstmt -&gt; [&quot;if&quot; condition &quot;then&quot; statement]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_whilestmt</span><span class="params">()</span></span>; <span class="comment">//whilestmt -&gt; [&quot;while&quot; condition &quot;do&quot; statement]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_condition</span><span class="params">()</span></span>; <span class="comment">//condition = &quot;odd&quot; expression | expression (&quot;=&quot;|&quot;#&quot;|&quot;&lt;&quot;|&quot;&gt;&quot;) expression</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_expression</span><span class="params">()</span></span>;<span class="comment">//expression -&gt; term &#123; (&quot;+&quot;|&quot;-&quot;) term&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_term</span><span class="params">()</span></span>;      <span class="comment">//term -&gt; factor &#123;(&quot;*&quot;|&quot;/&quot;) factor&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_factor</span><span class="params">()</span></span>;    <span class="comment">//factor -&gt; [ &quot;+&quot;|&quot;-&quot;] (ident | number | &quot;(&quot; expression &quot;)&quot;)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_ident</span><span class="params">()</span></span>;     <span class="comment">//ident -&gt; letter &#123;letter | digit&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_number</span><span class="params">()</span></span>;    <span class="comment">//number -&gt; digit &#123;digit&#125;</span></span><br><span class="line"><span class="comment">//函数实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exception_print</span><span class="params">(<span class="type">int</span> type, string expected = <span class="string">&quot;&quot;</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string rel = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//语法错误</span></span><br><span class="line">        rel = <span class="string">&quot;语法错误：预期为 &quot;</span> + expected + <span class="string">&quot;，但输入的是 &quot;</span> + tokens[index];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//标识符错误</span></span><br><span class="line">        rel = <span class="string">&quot;标识符 &quot;</span> + tokens[index] + <span class="string">&quot; 格式错误&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//整数错误</span></span><br><span class="line">        rel = <span class="string">&quot;整数 &quot;</span> + tokens[index] + <span class="string">&quot;格式错误&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ofstream <span class="title">output</span><span class="params">(<span class="string">&quot;Result.txt&quot;</span>, ofstream::app)</span></span>;</span><br><span class="line">    cout &lt;&lt; rel &lt;&lt; endl;</span><br><span class="line">    output &lt;&lt; rel &lt;&lt; endl;</span><br><span class="line">    success = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">(string expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == expected)</span><br><span class="line">        index++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">exception_print</span>(<span class="number">0</span>, expected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">(string expected, <span class="type">bool</span> majority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> isequal = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; symbollength; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tokens[index] == symbolarray[i])</span><br><span class="line">        &#123;</span><br><span class="line">            index++;</span><br><span class="line">            isequal = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        expected += symbolarray[i];</span><br><span class="line">        <span class="keyword">if</span> (i != symbollength - <span class="number">1</span>)</span><br><span class="line">            expected += <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isequal)</span><br><span class="line">        <span class="built_in">exception_print</span>(<span class="number">0</span>, expected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_program</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_block</span>();</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_block</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_constdecl</span>();</span><br><span class="line">    <span class="built_in">parse_vardecl</span>();</span><br><span class="line">    <span class="built_in">parse_procdecl</span>();</span><br><span class="line">    <span class="built_in">parse_statement</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_constdecl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;const&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;const&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_constitem</span>();</span><br><span class="line">        <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">match</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">parse_constitem</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_constitem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_ident</span>();</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_number</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_vardecl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;var&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;var&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_ident</span>();</span><br><span class="line">        <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">match</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">parse_ident</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_procdecl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;procedure&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;procedure&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_ident</span>();</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_block</span>();</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_statement</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isIdentifier</span>(tokens[index]))</span><br><span class="line">        <span class="built_in">parse_assignstmt</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;call&quot;</span>)</span><br><span class="line">        <span class="built_in">parse_callstmt</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;begin&quot;</span>)</span><br><span class="line">        <span class="built_in">parse_compstmt</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;if&quot;</span>)</span><br><span class="line">        <span class="built_in">parse_ifstmt</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;while&quot;</span>)</span><br><span class="line">        <span class="built_in">parse_whilestmt</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_assignstmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_ident</span>();</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;:=&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_expression</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_callstmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_ident</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_compstmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_statement</span>();</span><br><span class="line">    <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_statement</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_ifstmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;if&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_condition</span>();</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;then&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_statement</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_whilestmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;while&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_condition</span>();</span><br><span class="line">    <span class="built_in">match</span>(<span class="string">&quot;do&quot;</span>);</span><br><span class="line">    <span class="built_in">parse_statement</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_condition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;odd&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;odd&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_expression</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">parse_expression</span>();</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">parse_expression</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_expression</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_term</span>();</span><br><span class="line">    <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;+&quot;</span> || tokens[index] == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(tokens[index]);</span><br><span class="line">        <span class="built_in">parse_term</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_term</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_factor</span>();</span><br><span class="line">    <span class="keyword">while</span> (tokens[index] == <span class="string">&quot;*&quot;</span> || tokens[index] == <span class="string">&quot;/&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(tokens[index]);</span><br><span class="line">        <span class="built_in">parse_factor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_factor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens[index] == <span class="string">&quot;+&quot;</span> || tokens[index] == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">        <span class="built_in">match</span>(tokens[index]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isDigit</span>(tokens[index]))</span><br><span class="line">        <span class="built_in">parse_number</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isIdentifier</span>(tokens[index]))</span><br><span class="line">        <span class="built_in">parse_ident</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">parse_expression</span>();</span><br><span class="line">        <span class="built_in">match</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_ident</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isIdentifier</span>(tokens[index]))</span><br><span class="line">        <span class="built_in">match</span>(tokens[index]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">exception_print</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_number</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isDigit</span>(tokens[index]))</span><br><span class="line">        <span class="built_in">match</span>(tokens[index]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">exception_print</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分析语法，并输出其结果</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GrammaticalAnalysis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parse_program</span>();</span><br><span class="line">    <span class="function">ofstream <span class="title">output</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>, ofstream::app)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (success)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;语法正确&quot;</span> &lt;&lt; endl;</span><br><span class="line">        output &lt;&lt; <span class="string">&quot;语法正确&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//语法分析器</span></span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* 符号        种别码  || 符号        种别码 *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* begin       1       || *           17     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* end         2       || /           18     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* if          3       || =           19     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* then        4       || #           20     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* while       5       || &lt;           21     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* do          6       || &gt;           22     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* const       7       || (           23     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* var         8       || )           24     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* call        9       || ,           25     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* procedure   10      || .           26     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* odd         11      || ;           27     *\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* :=          14      || ident       12     *\n&quot;</span>;<span class="comment">//标识符</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* +           15      || digit       13     *\n&quot;</span>;<span class="comment">//整形常数</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;* -           16      ||                    *\n&quot;</span>;</span><br><span class="line">    <span class="built_in">GrammaticalAnalysis</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装Ubuntu20.04</title>
      <link href="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/"/>
      <url>/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/</url>
      
        <content type="html"><![CDATA[<h2 id="VMwarePRO17安装Ubuntu22-04（含旧版本换源）"><a href="#VMwarePRO17安装Ubuntu22-04（含旧版本换源）" class="headerlink" title="VMwarePRO17安装Ubuntu22.04（含旧版本换源）"></a>VMwarePRO17安装Ubuntu22.04（含旧版本换源）</h2><p>（22.04版本安装时地区选择上海之后，开机默认就是中国内地的镜像源服务器，速度很快）</p><h3 id="VMware和Ubuntu22-04的下载"><a href="#VMware和Ubuntu22-04的下载" class="headerlink" title="VMware和Ubuntu22.04的下载"></a>VMware和Ubuntu22.04的下载</h3><p>VMware下载链接：<a href="https://www.vmware.com/cn/products/workstation-player/workstation-player-evaluation.html">VMware下载链接</a></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/VMware.jpg"></p><p>Ubuntu下载链接：<a href="https://ubuntu.com/download/desktop">Ubuntu20.04</a></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/ubuntu.jpg"></p><h3 id="VMware安装Ubuntu"><a href="#VMware安装Ubuntu" class="headerlink" title="VMware安装Ubuntu"></a>VMware安装Ubuntu</h3><p>打开VMware点击<strong>创建新虚拟机</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/1.png"></p><p>选择<strong>稍后安装操作系统</strong>，下一步</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/2.png"></p><p>客户机操作系统选择<strong>Linux</strong>，版本选择<strong>Ubuntu64位</strong>，接着下一步</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/3.png"></p><p>虚拟机名称根据自己的喜好取，位置建议放到非C盘</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/4.png"></p><p>根据自己的电脑的配置选择虚拟机的处理器和内核数量</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/5.png"></p><p>内存也是根据自己的电脑配置选择（我的是16GB），继续下一步</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/6.png"></p><p>网络选择<strong>NAT模式</strong>，继续下一步</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/7.png"></p><p>控制器类型和虚拟磁盘类型分别选择<strong>LSI Logic(L</strong>)和**SCSI(S)**，继续下一步</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/8.png"></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/10.png"></p><p>选择创建新虚拟磁盘，下一步，</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/11.png"></p><p>磁盘大小根据自己电脑配置和自己的需要选择，选择<strong>将虚拟磁盘拆分成多个文件</strong>，继续下一步</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/12.png"></p><p>直接下一步，选择<strong>自定义硬件</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/13.png"></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/14.png"></p><p>选择<strong>CD&#x2F;DVD</strong>，点使用<strong>ISO映像文件</strong>，浏览选择你的<strong>镜像路径</strong>，点击确定</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/15.png"></p><p>点击<strong>开启此虚拟机</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/16.png"></p><p>进入如下界面<strong>直接按回车键</strong>，然后就是漫长的等待…</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/17.png"></p><p>进入之后，选择<strong>中文简体</strong>，再选择<strong>安装Ubuntu</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/18.png"></p><p>键盘布局选择<strong>chinese—Chinese</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/19.png"></p><p>接下来选择正常安装，点击继续，如果下边的按钮显示不出来，可以在桌面右上角那个三角形点开，选择设置，找到显示器调整一下分辨率，点击<strong>应用</strong>，选择<strong>保留更改。</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/20.png"></p><p>选择<strong>清除整个磁盘并安装Ubuntu</strong>，点击现在安装，出现提醒，点击继续</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/21.png"></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/22.png"></p><p>地区选择<strong>shanghai</strong>点击继续（<strong>22.04版本的Ubuntu这个选过之后默认打开就是国内的镜像源，而且速度很快</strong>）</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/23.png"></p><p>自己填写相关信息，点击继续</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/24.png"></p><p>又又又是漫长的等待…然后<strong>现在重启</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/25.png"></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/26.png"></p><h3 id="实现Windows本机与虚拟机之间的复制粘贴和窗口自适应"><a href="#实现Windows本机与虚拟机之间的复制粘贴和窗口自适应" class="headerlink" title="实现Windows本机与虚拟机之间的复制粘贴和窗口自适应"></a>实现Windows本机与虚拟机之间的复制粘贴和窗口自适应</h3><p>重启之后点击桌面左下角，输入terminal，打开<strong>终端</strong>。</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/27.png"></p><p>执行以下命令：<code>sudo apt-get update</code>提示输入密码</p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/28.png"></p><p>上面命令执行结束后，接着执行：<code>sudo apt-get install open-vm-tools</code>，输入<strong>y</strong></p><p><img src="/2023/06/08/VMware%E5%AE%89%E8%A3%85Ubuntu20.04/29.png"></p><p>最后执行：<code>sudo apt-get install open-vm-tools-desktop</code></p><p>然后重新启动就可以了。</p><h3 id="旧版本Ubuntu换源"><a href="#旧版本Ubuntu换源" class="headerlink" title="旧版本Ubuntu换源"></a>旧版本Ubuntu换源</h3><p>（22.04版本安装时地区选择上海之后，开机默认就是中国内地的镜像源服务器，速度很快不需要换源）其他版本进入是默认的国外源。</p><p>打开终端执行：</p><p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p><p>备份好原有的源文件之后执行以下命令编辑源文件列表</p><p><code>sudo gedit /etc/apt/sources.list</code></p><p>将<strong>原有的源地址全部删除</strong>替换为一下<strong>任意一个国内源地址</strong></p><p><strong>保存并关闭列表，执行下列命令更新一下源列表</strong></p><p><code>sudo apt update</code></p><p><strong>完成</strong></p><p>下边给出国内常用一些镜像源：</p><p><strong>阿里源</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p><strong>中科大源</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p><strong>清华源</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware安装虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验一</title>
      <link href="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="实验一：词法分析"><a href="#实验一：词法分析" class="headerlink" title="实验一：词法分析"></a>实验一：词法分析</h3><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><p>实现PL&#x2F;0语言的词法分析器</p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><h5 id="PL-x2F-0语言的单词结构"><a href="#PL-x2F-0语言的单词结构" class="headerlink" title="PL&#x2F;0语言的单词结构"></a>PL&#x2F;0语言的单词结构</h5><p>关键字(共11个)：空格分隔列表如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin  end  if  then while  do  const  var  call  procedure  odd</span><br></pre></td></tr></table></figure><p>标识符：字母序列，最大长度10，不能与上述关键字相同</p><p>常数：整型常数</p><p>算符和界符（14个）：空格分隔列表如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\+ - * / = # &lt; &gt; := ( ) , . ;</span><br></pre></td></tr></table></figure><h5 id="单词种类的划分"><a href="#单词种类的划分" class="headerlink" title="单词种类的划分"></a>单词种类的划分</h5><mark class="hl-label blue">标识符</mark> ：作为一种<mark class="hl-label red">常数</mark> ：作为一种<mark class="hl-label green">算符和界符</mark> ：每种作为一个单独种别<mark class="hl-label pink">关键字</mark> ：每个作为一个单独种别<h5 id="PL-x2F-0的语言的词法分析器将要完成以下工作"><a href="#PL-x2F-0的语言的词法分析器将要完成以下工作" class="headerlink" title="PL&#x2F;0的语言的词法分析器将要完成以下工作"></a>PL&#x2F;0的语言的词法分析器将要完成以下工作</h5><p>（1）  跳过分隔符（如空格，回车，制表符）；</p><p>（2）  识别诸如begin，end，if，while等关键字；</p><p>（3）  识别非关键字的一般标识符。</p><p>（4）  识别常数数字序列。</p><p>（5）  识别前面列出的单字符操作符和:&#x3D;双字符特殊符号。</p><h5 id="词法分析器的实现形式"><a href="#词法分析器的实现形式" class="headerlink" title="词法分析器的实现形式"></a>词法分析器的实现形式</h5><p>建议把词法分析器设计成一个<strong>独立子程序</strong>，运行一次产生一个单词符号</p><h5 id="词法分析器的输出形式"><a href="#词法分析器的输出形式" class="headerlink" title="词法分析器的输出形式"></a>词法分析器的输出形式</h5><p>（种别，属性值）</p><p>其中：种别在“2、单词的种别”中进行了定义；<br> 属性值：若单词种别只代表唯一单词，属性值为空；<br>     若单词种别是标识符，为该单词在标识符表中的位置；<br>     若单词种别是常数，属性值为对应常数值。</p><h5 id="标识符表可以简单定义为内容不重复的字符串数组。"><a href="#标识符表可以简单定义为内容不重复的字符串数组。" class="headerlink" title="标识符表可以简单定义为内容不重复的字符串数组。"></a>标识符表可以简单定义为内容不重复的字符串数组。</h5><h5 id="程序的输入：可以读取标准输入，或者打开指定的源程序文件。"><a href="#程序的输入：可以读取标准输入，或者打开指定的源程序文件。" class="headerlink" title="程序的输入：可以读取标准输入，或者打开指定的源程序文件。"></a>程序的输入：可以读取标准输入，或者打开指定的源程序文件。</h5><h4 id="实验代码："><a href="#实验代码：" class="headerlink" title="实验代码："></a>实验代码：</h4><p>输入的测试文本文件（我的路径是：D:DesktopTest.txt）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PL/0 demo</span></span><br><span class="line"></span><br><span class="line">(*</span><br><span class="line">This is a multi-line</span><br><span class="line">comment</span><br><span class="line">*)</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> limit=<span class="number">10</span>;</span><br><span class="line">var n, f, test, t1, t2;</span><br><span class="line">begin</span><br><span class="line">     n := <span class="number">0</span>;</span><br><span class="line">     f := <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">while</span> n <span class="meta"># limit do</span></span><br><span class="line">     begin</span><br><span class="line">          n := n + <span class="number">1</span>;</span><br><span class="line">          f := f * n;</span><br><span class="line">     end;</span><br><span class="line">     test := <span class="number">1</span>+<span class="number">2</span><span class="number">-3</span>*<span class="number">4</span>/(<span class="number">5</span><span class="number">-6</span>)+<span class="number">-7</span>;</span><br><span class="line">t1:=test*<span class="number">2</span>;</span><br><span class="line">t2:=t1+test;</span><br><span class="line">     call print;<span class="comment">// print all var</span></span><br><span class="line">end.</span><br></pre></td></tr></table></figure><p>词法分析器实现代代码：（主要分为预处理和词法分析）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;String.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//预处理</span></span><br><span class="line">    FILE *p;</span><br><span class="line">    <span class="comment">//定义输入文件指针和flag标识</span></span><br><span class="line">    <span class="type">int</span>  falg = <span class="number">0</span>, len, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义匹配关键字，第一个初始为空字符串</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *rwtab[<span class="number">12</span>] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;const&quot;</span>, <span class="string">&quot;var&quot;</span>, <span class="string">&quot;call&quot;</span>, <span class="string">&quot;procedure&quot;</span>, <span class="string">&quot;odd&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//定义输入的字符串数组和单词缓存数组</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">1000</span>], str1[<span class="number">1000</span>], c;</span><br><span class="line">    <span class="comment">//定义种别码syn，读取到的数字num，用于匹配的关键词k</span></span><br><span class="line">    <span class="type">int</span> syn, num;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">char</span> token[<span class="number">10</span>];<span class="comment">//当前读取到的token数组</span></span><br><span class="line">    <span class="keyword">if</span>((p = <span class="built_in">fopen</span>(<span class="string">&quot;D:\\Desktop\\Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>) &#123; <span class="comment">//读取失败时结束</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入文件无法打开&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>((c = <span class="built_in">fgetc</span>(p)) != EOF) &#123; <span class="comment">//读取到文件末尾结束</span></span><br><span class="line">            str[i] = c;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fclose</span>(p);</span><br><span class="line">        str[i] = <span class="string">&#x27;\0&#x27;</span>;   <span class="comment">//str[i]=&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123; <span class="comment">//单行注释</span></span><br><span class="line">                <span class="keyword">while</span>(str[i++] != <span class="string">&#x27;\n&#x27;</span>) &#123;&#125;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123; <span class="comment">//多行注释</span></span><br><span class="line">                <span class="keyword">while</span>(!(str[i] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>)) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27; &#x27;</span> &amp;&amp; str[i + <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//多个空格，去除空格</span></span><br><span class="line">                <span class="keyword">while</span>(str[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">if</span>(str1[j - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    str1[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\n&#x27;</span>) &#123; <span class="comment">//换行处理</span></span><br><span class="line">                <span class="keyword">if</span>(str1[j - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    str1[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\t&#x27;</span>) &#123; <span class="comment">//制表符处理</span></span><br><span class="line">                <span class="keyword">if</span>(str1[j - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    str1[j++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> str1[j++] = str[i];<span class="comment">//记录其他字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        str1[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*********************************************\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* 符号        种别码  || 符号        种别码 *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* begin       1       || *           17     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* end         2       || /           18     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* if          3       || =           19     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* then        4       || #           20     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* while       5       || &lt;           21     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* do          6       || &gt;           22     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* const       7       || (           23     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* var         8       || )           24     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* call        9       || ,           25     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* procedure   10      || .           26     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* odd         11      || ;           27     *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* :=          14      || ident       12     *\n&quot;</span>; <span class="comment">//标识符号</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* +           15      || digit       13     *\n&quot;</span>; <span class="comment">//整型常数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* -           16      ||                    *\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*********************************************\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;符号\t&quot;</span> &lt;&lt; <span class="string">&quot;种别码\t&quot;</span> &lt;&lt; <span class="string">&quot;说明&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; str1[i] != <span class="string">&#x27;\0&#x27;</span>;) &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果第一个字符为字母或下划线时，继续读取单词并判断是否为关键字</span></span><br><span class="line">        <span class="keyword">if</span>((str1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (str1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">while</span>((str1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (str1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) || (str1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) || str1[i] == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">                token[j++] = str1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            token[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( k = <span class="number">1</span>; k &lt; <span class="number">12</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(rwtab[k], token) == <span class="number">0</span>) <span class="comment">//关键词匹配</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; <span class="number">12</span>)</span><br><span class="line">                syn = k;<span class="comment">//种别码1-11为关键字</span></span><br><span class="line">            <span class="keyword">else</span> syn = <span class="number">12</span>;<span class="comment">//种别码12为自定义标识符</span></span><br><span class="line">        &#125;<span class="comment">//关键字和标识符处理</span></span><br><span class="line">        <span class="comment">//如果第一个字符为数字时继续读取数字直至结束，并输出对应的信息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(str1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str1[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; <span class="comment">//当读到第一个为0~9的数字时接着读之后的数字</span></span><br><span class="line">                num = num * <span class="number">10</span> + str1[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">//&#x27;9&#x27; - &#x27;&#x27; =9  ACSII码</span></span><br><span class="line">                token[j++] = str1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            syn = <span class="number">13</span>;<span class="comment">//种别码13为数字</span></span><br><span class="line">        &#125;<span class="comment">//数字在此处处理</span></span><br><span class="line">        <span class="comment">//除关键字及一般标识符和数字之外，其他字符只可能是界符或运算符</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//种别码14-27为间隔符与算符</span></span><br><span class="line">            <span class="keyword">if</span>(str1[i] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; str1[i + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">                syn = <span class="number">14</span>;</span><br><span class="line">                token[j++] = str1[i];</span><br><span class="line">                token[j++] = str1[++i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//分析每个间隔符并给出相应的种别码</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str1[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                syn = <span class="number">-1</span>;<span class="comment">//空格处理，种别码为-1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span>(str1[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">15</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">16</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">17</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">18</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">19</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">20</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">21</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">22</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">23</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">24</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">25</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">26</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;;&#x27;</span>:</span><br><span class="line">                    syn = <span class="number">27</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                token[j++] = str1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        token[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(syn &gt; <span class="number">-1</span> &amp;&amp; syn &lt; <span class="number">12</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;关键字&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn == <span class="number">12</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;标识符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn &gt; <span class="number">13</span> &amp;&amp; syn &lt; <span class="number">23</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;算符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn &gt; <span class="number">22</span> &amp;&amp; syn &lt; <span class="number">28</span>)</span><br><span class="line">            cout &lt;&lt; token &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;界符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(syn == <span class="number">13</span>)</span><br><span class="line">            cout &lt;&lt; num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; syn &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;常数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/01.jpg" alt="01"></p><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/02.jpg" alt="02"></p><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/03.jpg" alt="03"></p><p><img src="/2023/05/16/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%B8%80/04.jpg" alt="04"></p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理</title>
      <link href="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="图像的表示与描述"><a href="#图像的表示与描述" class="headerlink" title="图像的表示与描述"></a>图像的表示与描述</h3><h4 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h4><p>对纹理图像集利用灰度共生矩阵的二次统计量特征和最近邻法进行分类，其中每类纹理图像有8幅，总共64幅，每幅图像的大小为200x200。实验中将各类纹理图像样本按数量随机等分成两部分作为训练样本集和测试样本集，按照这种方式运行10 次对结果求平均分类正确率。观察不同的灰度共生矩阵对分类正确率的影响。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="（1）新建程序文件"><a href="#（1）新建程序文件" class="headerlink" title="（1）新建程序文件"></a>（1）新建程序文件</h5><h5 id="（2）编写程序如下"><a href="#（2）编写程序如下" class="headerlink" title="（2）编写程序如下"></a>（2）编写程序如下</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">percent=[];%正确率数组</span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">train=[];test=[];</span><br><span class="line">index=<span class="number">0</span>;%测试集下标</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">    P=randperm(<span class="number">8</span>);%随机序列</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        train&#123;i,j&#125;=<span class="built_in">strcat</span>(int2str(i),int2str(P(j)),<span class="string">&#x27;.jpg&#x27;</span>);%训练集</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">5</span>:<span class="number">8</span></span><br><span class="line">        index=index+<span class="number">1</span>;</span><br><span class="line">        test&#123;index&#125;=<span class="built_in">strcat</span>(int2str(i),int2str(P(j)),<span class="string">&#x27;.jpg&#x27;</span>);  %测试集</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">[M,N]=size(train);%训练集大小</span><br><span class="line">X=[];</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:N</span><br><span class="line">        name=<span class="type">char</span>(train(i,j));</span><br><span class="line">        img_train=imread(name);%读取训练集图片</span><br><span class="line">        glcm=graycomatrix(img_train,<span class="string">&#x27;Offset&#x27;</span>,[<span class="number">-1</span> <span class="number">-1</span>],<span class="string">&#x27;NumLevels&#x27;</span>,<span class="number">4</span>);%计算灰度共生矩阵,<span class="number">135</span>度方向,d=<span class="number">1</span>,量化级数<span class="number">4</span></span><br><span class="line">        stats = graycoprops(glcm, <span class="string">&#x27;all&#x27;</span>);%对比度、相关、能量、均匀度</span><br><span class="line">        out= entropy(img_train); %整幅图的熵</span><br><span class="line">        X(i,j,:)=[stats.Contrast,stats.Correlation,stats.Energy,stats.Homogeneity,out];%训练集特征向量</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">truenum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:index</span><br><span class="line">    x=[];</span><br><span class="line">    name=<span class="type">char</span>(test(i));</span><br><span class="line">    img_test=imread(name);%读取测试集图片</span><br><span class="line">    glcm=graycomatrix(img_test,<span class="string">&#x27;Offset&#x27;</span>,[<span class="number">-1</span> <span class="number">-1</span>],<span class="string">&#x27;NumLevels&#x27;</span>,<span class="number">4</span>);%计算灰度共生矩阵,<span class="number">135</span>度方向,d=<span class="number">1</span>,量化级数<span class="number">4</span></span><br><span class="line">    stats = graycoprops(glcm, <span class="string">&#x27;all&#x27;</span>);%对比度、相关、能量、均匀度</span><br><span class="line">    out= entropy(img_train); %整幅图的熵</span><br><span class="line">    x=[stats.Contrast,stats.Correlation,stats.Energy,stats.Homogeneity,out];%测试集特征向量</span><br><span class="line">    gix=[];</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:M</span><br><span class="line">        odist=[];%第j类的欧式距离数组</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span>:N</span><br><span class="line">            a=X(j,k,:);</span><br><span class="line">            a=a(:)<span class="string">&#x27;;%训练集特征向量</span></span><br><span class="line"><span class="string">            odist(k)=norm(a-x);%求欧氏距离</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        gix(j)=min(odist);%第j类中最小欧氏距离</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    [gjx,mindex]=min(gix);%最小欧氏距离及其类别</span></span><br><span class="line"><span class="string">    fprintf(&#x27;</span>%s属于第%d类    <span class="string">&#x27;,name,mindex);</span></span><br><span class="line"><span class="string">    if mod(i,4)==0</span></span><br><span class="line"><span class="string">        fprintf(&#x27;</span>\n<span class="number">&#x27;</span>);%每四个换一次行</span><br><span class="line">    end</span><br><span class="line">    num=str2num(name(<span class="number">1</span>));%正确的类别</span><br><span class="line">    <span class="keyword">if</span> num==mindex</span><br><span class="line">        truenum=truenum+<span class="number">1</span>;%求分类正确的数量</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"><span class="title function_">percent</span><span class="params">(n)</span>=truenum/<span class="number">32</span>;%求分类正确率</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="string">&#x27;正确率为：%f\n&#x27;</span>,percent(n));</span><br><span class="line">end</span><br><span class="line"><span class="title function_">fprintf</span><span class="params">(<span class="string">&#x27;10次平均正确率为：%f\n&#x27;</span>,mean(percent))</span>;%求平均分类正确率</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据记录："><a href="#数据记录：" class="headerlink" title="数据记录："></a>数据记录：</h4><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/02.jpg" alt="01"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/03.jpg" alt="03"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/04.jpg" alt="04"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/05.jpg" alt="05"></p><h5 id="问题讨论："><a href="#问题讨论：" class="headerlink" title="问题讨论："></a>问题讨论：</h5><p>纹理特征不是基于像素点的特征，它需要在包含多个像素点的区域中进行统计计算。在图像模式识别的模式匹配时，此类区域性的特征具有一定的优势。可以避 免由手局部的偏差造成匹配失败。作为一种统计特征，纹理特征一般具有旋转不变性，并且 对于噪声有较强的抵抗能力。但是，纹理特征也有其缺点。当图像的分辦率变化时，所计算出来的纹理可能会有较大的偏差，从2D图像反映出来的纹理不一定是3D物体表面真实的纹理。</p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/04/11/Python/"/>
      <url>/2023/04/11/Python/</url>
      
        <content type="html"><![CDATA[<h3 id="入门练习"><a href="#入门练习" class="headerlink" title="入门练习"></a>入门练习</h3><h5 id="Fibonacci斐波那契数列"><a href="#Fibonacci斐波那契数列" class="headerlink" title="Fibonacci斐波那契数列"></a>Fibonacci斐波那契数列</h5><p>问题描述：Fibonacci数列的递推公式为：Fn&#x3D;Fn-1+Fn-2，其中F1&#x3D;F2&#x3D;1。<br>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。<br>输入格式:<br>输入包含一个整数n。<br>输出格式:<br>输出一行，包含一个整数，表示Fn除以10007的余数。</p><p>样例输入:10<br>样例输出:55<br>样例输入:22<br>样例输出:7704<br>数据规模与约定:1 &lt;&#x3D; n &lt;&#x3D; 1,000,000。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">F1, F2 = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">    F1, F2 = F2 % <span class="number">10007</span>, (F1+F2) % <span class="number">10007</span></span><br><span class="line">    <span class="built_in">print</span>(F1, F2)</span><br><span class="line"><span class="built_in">print</span>(F2)</span><br><span class="line"><span class="comment"># 先用递归计算斐波那契数列的值再取余数会超时</span></span><br></pre></td></tr></table></figure><h5 id="圆的面积"><a href="#圆的面积" class="headerlink" title="圆的面积"></a>圆的面积</h5><p>问题描述<br>给定圆的半径r，求圆的面积。<br>输入格式<br>输入包含一个整数r，表示圆的半径。<br>输出格式<br>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br>说明：在本题中，输入是一个整数，但是输出是一个实数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">area = math.pi*r*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.7f&quot;</span> % s)</span><br></pre></td></tr></table></figure><h5 id="序列求和"><a href="#序列求和" class="headerlink" title="序列求和"></a>序列求和</h5><p>问题描述<br>求1+2+3+…+n的值。<br>输入格式<br>输入包括一个整数n。<br>输出格式<br>输出一行，包括一个整数，表示1+2+3+…+n的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0.5</span>*n*n + <span class="number">0.5</span>*n <span class="comment"># 直接用公式求和，迭代求和耗时久</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><h5 id="A-B问题"><a href="#A-B问题" class="headerlink" title="A+B问题"></a>A+B问题</h5><p>输入A、B，输出A+B。<br>说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。<br>输入格式<br>输入的第一行包括两个整数，由空格分隔，分别表示A、B。<br>说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。<br>做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。<br>在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。<br>输出格式<br>输出一行，包括一个整数，表示A+B的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A, B = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(A+B)</span><br></pre></td></tr></table></figure><h3 id="基础练习"><a href="#基础练习" class="headerlink" title="基础练习"></a>基础练习</h3><h5 id="数列排序"><a href="#数列排序" class="headerlink" title="数列排序"></a>数列排序</h5><p>问题描述：<br>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200</p><p>输入格式：<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出格式：<br>　　输出一行，按从小到大的顺序输出排序后的数列。</p><p>样例输入：<br>5<br>8 3 6 4 9<br>样例输出：<br>3 4 6 8 9</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt;= n &lt;= <span class="number">100</span>:</span><br><span class="line">    null_List = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    null_List.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(null_List)):</span><br><span class="line">        <span class="built_in">print</span>(null_List[i], end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="十六进制转八进制"><a href="#十六进制转八进制" class="headerlink" title="十六进制转八进制"></a>十六进制转八进制</h5><p>问题描述：给定n个十六进制正整数，输出它们对应的八进制数。</p><p>输入格式：<br>　　输入的第一行为一个正整数n （1&lt;&#x3D;n&lt;&#x3D;10）。<br>　　接下来n行，每行一个由0-9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。<br>输出格式：<br>　　输出n行，每行为输入对应的八进制正整数。</p><p>【注意】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p><p>样例输入<br>　　2<br>　　39<br>　　123ABC<br>样例输出<br>　　71<br>　　4435274　　　　</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin:转换成2进制 oct:转换成8进制 hex:转换成16进制 int:十进制</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">10</span>:</span><br><span class="line">        s=<span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">100000</span>:</span><br><span class="line">            res_1 = <span class="built_in">int</span>(s, <span class="number">16</span>)<span class="comment"># 把十六进制的s转换成十进制</span></span><br><span class="line">            res_2 = <span class="built_in">oct</span>(res_1)</span><br><span class="line">            li.append(res_2[<span class="number">2</span>:])<span class="comment"># 从第三位开始取</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="查找整数"><a href="#查找整数" class="headerlink" title="查找整数"></a>查找整数</h5><p>问题描述：<br>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。<br>输入格式：<br>第一行包含一个整数n。<br>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。<br>第三行包含一个整数a，为待查找的数。<br>输出格式：<br>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。<br>样例输入：<br>6<br>1 9 4 8 3 9<br>9<br>样例输出：<br>2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">if</span> a==nums[i]:</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">len</span>(nums)-<span class="number">1</span> <span class="keyword">and</span> a!=nums[i]:</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h5><p>问题描述：<br>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。　　<br>下面给出了杨辉三角形的前4行：　　<br>1　　<br>1 1　　<br>1 2 1<br>1 3 3 1　　<br>给出n，输出它的前n行。<br>输入格式：<br>输入包含一个数n。<br>输出格式：<br>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。<br>样例输入：<br>4<br>样例输出：<br>1<br>1 1<br>1 2 1<br>1 3 3 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[[<span class="number">0</span>]*n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">            nums[i][j]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i][j]=nums[i-<span class="number">1</span>][j-<span class="number">1</span>]+nums[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">if</span> nums[i][j]!=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(nums[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
