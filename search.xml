<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数字图像处理</title>
      <link href="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="图像的表示与描述"><a href="#图像的表示与描述" class="headerlink" title="图像的表示与描述"></a>图像的表示与描述</h3><h4 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h4><p>对纹理图像集利用灰度共生矩阵的二次统计量特征和最近邻法进行分类，其中每类纹理图像有8幅，总共64幅，每幅图像的大小为200x200。实验中将各类纹理图像样本按数量随机等分成两部分作为训练样本集和测试样本集，按照这种方式运行10 次对结果求平均分类正确率。观察不同的灰度共生矩阵对分类正确率的影响。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h6 id="（1）新建程序文件"><a href="#（1）新建程序文件" class="headerlink" title="（1）新建程序文件"></a>（1）新建程序文件</h6><h6 id="（2）编写程序如下"><a href="#（2）编写程序如下" class="headerlink" title="（2）编写程序如下"></a>（2）编写程序如下</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">percent=[];%正确率数组</span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">train=[];test=[];</span><br><span class="line">index=<span class="number">0</span>;%测试集下标</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">    P=randperm(<span class="number">8</span>);%随机序列</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        train&#123;i,j&#125;=<span class="built_in">strcat</span>(int2str(i),int2str(P(j)),<span class="string">&#x27;.jpg&#x27;</span>);%训练集</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">5</span>:<span class="number">8</span></span><br><span class="line">        index=index+<span class="number">1</span>;</span><br><span class="line">        test&#123;index&#125;=<span class="built_in">strcat</span>(int2str(i),int2str(P(j)),<span class="string">&#x27;.jpg&#x27;</span>);  %测试集</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">[M,N]=size(train);%训练集大小</span><br><span class="line">X=[];</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:N</span><br><span class="line">        name=<span class="type">char</span>(train(i,j));</span><br><span class="line">        img_train=imread(name);%读取训练集图片</span><br><span class="line">        glcm=graycomatrix(img_train,<span class="string">&#x27;Offset&#x27;</span>,[<span class="number">-1</span> <span class="number">-1</span>],<span class="string">&#x27;NumLevels&#x27;</span>,<span class="number">4</span>);%计算灰度共生矩阵,<span class="number">135</span>度方向,d=<span class="number">1</span>,量化级数<span class="number">4</span></span><br><span class="line">        stats = graycoprops(glcm, <span class="string">&#x27;all&#x27;</span>);%对比度、相关、能量、均匀度</span><br><span class="line">        out= entropy(img_train); %整幅图的熵</span><br><span class="line">        X(i,j,:)=[stats.Contrast,stats.Correlation,stats.Energy,stats.Homogeneity,out];%训练集特征向量</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">truenum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:index</span><br><span class="line">    x=[];</span><br><span class="line">    name=<span class="type">char</span>(test(i));</span><br><span class="line">    img_test=imread(name);%读取测试集图片</span><br><span class="line">    glcm=graycomatrix(img_test,<span class="string">&#x27;Offset&#x27;</span>,[<span class="number">-1</span> <span class="number">-1</span>],<span class="string">&#x27;NumLevels&#x27;</span>,<span class="number">4</span>);%计算灰度共生矩阵,<span class="number">135</span>度方向,d=<span class="number">1</span>,量化级数<span class="number">4</span></span><br><span class="line">    stats = graycoprops(glcm, <span class="string">&#x27;all&#x27;</span>);%对比度、相关、能量、均匀度</span><br><span class="line">    out= entropy(img_train); %整幅图的熵</span><br><span class="line">    x=[stats.Contrast,stats.Correlation,stats.Energy,stats.Homogeneity,out];%测试集特征向量</span><br><span class="line">    gix=[];</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:M</span><br><span class="line">        odist=[];%第j类的欧式距离数组</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span>:N</span><br><span class="line">            a=X(j,k,:);</span><br><span class="line">            a=a(:)<span class="string">&#x27;;%训练集特征向量</span></span><br><span class="line"><span class="string">            odist(k)=norm(a-x);%求欧氏距离</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        gix(j)=min(odist);%第j类中最小欧氏距离</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    [gjx,mindex]=min(gix);%最小欧氏距离及其类别</span></span><br><span class="line"><span class="string">    fprintf(&#x27;</span>%s属于第%d类    <span class="string">&#x27;,name,mindex);</span></span><br><span class="line"><span class="string">    if mod(i,4)==0</span></span><br><span class="line"><span class="string">        fprintf(&#x27;</span>\n<span class="number">&#x27;</span>);%每四个换一次行</span><br><span class="line">    end</span><br><span class="line">    num=str2num(name(<span class="number">1</span>));%正确的类别</span><br><span class="line">    <span class="keyword">if</span> num==mindex</span><br><span class="line">        truenum=truenum+<span class="number">1</span>;%求分类正确的数量</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"><span class="title function_">percent</span><span class="params">(n)</span>=truenum/<span class="number">32</span>;%求分类正确率</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="string">&#x27;正确率为：%f\n&#x27;</span>,percent(n));</span><br><span class="line">end</span><br><span class="line"><span class="title function_">fprintf</span><span class="params">(<span class="string">&#x27;10次平均正确率为：%f\n&#x27;</span>,mean(percent))</span>;%求平均分类正确率</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据记录："><a href="#数据记录：" class="headerlink" title="数据记录："></a>数据记录：</h4><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/02.jpg" alt="01"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/03.jpg" alt="03"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/04.jpg" alt="04"></p><p><img src="/2023/05/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/05.jpg" alt="05"></p><h5 id="问题讨论："><a href="#问题讨论：" class="headerlink" title="问题讨论："></a>问题讨论：</h5><p>纹理特征不是基于像素点的特征，它需要在包含多个像素点的区域中进行统计计算。在图像模式识别的模式匹配时，此类区域性的特征具有一定的优势。可以避 免由手局部的偏差造成匹配失败。作为一种统计特征，纹理特征一般具有旋转不变性，并且 对于噪声有较强的抵抗能力。但是，纹理特征也有其缺点。当图像的分辦率变化时，所计算出来的纹理可能会有较大的偏差，从2D图像反映出来的纹理不一定是3D物体表面真实的纹理。</p>]]></content>
      
      
      <categories>
          
          <category> 实验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/04/11/Python/"/>
      <url>/2023/04/11/Python/</url>
      
        <content type="html"><![CDATA[<h3 id="一-入门练习"><a href="#一-入门练习" class="headerlink" title="一. 入门练习"></a>一. 入门练习</h3><h5 id="1-Fibonacci斐波那契数列"><a href="#1-Fibonacci斐波那契数列" class="headerlink" title="1. Fibonacci斐波那契数列"></a>1. Fibonacci斐波那契数列</h5><p>问题描述：Fibonacci数列的递推公式为：Fn&#x3D;Fn-1+Fn-2，其中F1&#x3D;F2&#x3D;1。<br>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。<br>输入格式:<br>输入包含一个整数n。<br>输出格式:<br>输出一行，包含一个整数，表示Fn除以10007的余数。</p><p>样例输入:10<br>样例输出:55<br>样例输入:22<br>样例输出:7704<br>数据规模与约定:1 &lt;&#x3D; n &lt;&#x3D; 1,000,000。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">F1, F2 = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">    F1, F2 = F2 % <span class="number">10007</span>, (F1+F2) % <span class="number">10007</span></span><br><span class="line">    <span class="built_in">print</span>(F1, F2)</span><br><span class="line"><span class="built_in">print</span>(F2)</span><br><span class="line"><span class="comment"># 先用递归计算斐波那契数列的值再取余数会超时</span></span><br></pre></td></tr></table></figure><h5 id="2-圆的面积"><a href="#2-圆的面积" class="headerlink" title="2. 圆的面积"></a>2. 圆的面积</h5><p>问题描述<br>给定圆的半径r，求圆的面积。<br>输入格式<br>输入包含一个整数r，表示圆的半径。<br>输出格式<br>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br>说明：在本题中，输入是一个整数，但是输出是一个实数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">area = math.pi*r*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.7f&quot;</span> % s)</span><br></pre></td></tr></table></figure><h5 id="3-序列求和"><a href="#3-序列求和" class="headerlink" title="3. 序列求和"></a>3. 序列求和</h5><p>问题描述<br>求1+2+3+…+n的值。<br>输入格式<br>输入包括一个整数n。<br>输出格式<br>输出一行，包括一个整数，表示1+2+3+…+n的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0.5</span>*n*n + <span class="number">0.5</span>*n <span class="comment"># 直接用公式求和，迭代求和耗时久</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><h5 id="4-A-B问题"><a href="#4-A-B问题" class="headerlink" title="4. A+B问题"></a>4. A+B问题</h5><p>输入A、B，输出A+B。<br>说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。<br>输入格式<br>输入的第一行包括两个整数，由空格分隔，分别表示A、B。<br>说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。<br>做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。<br>在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。<br>输出格式<br>输出一行，包括一个整数，表示A+B的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A, B = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(A+B)</span><br></pre></td></tr></table></figure><h3 id="二-基础练习"><a href="#二-基础练习" class="headerlink" title="二. 基础练习"></a>二. 基础练习</h3><h5 id="1-数列排序"><a href="#1-数列排序" class="headerlink" title="1. 数列排序"></a>1. 数列排序</h5><p>问题描述：<br>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200</p><p>输入格式：<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出格式：<br>　　输出一行，按从小到大的顺序输出排序后的数列。</p><p>样例输入：<br>5<br>8 3 6 4 9<br>样例输出：<br>3 4 6 8 9</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt;= n &lt;= <span class="number">100</span>:</span><br><span class="line">    null_List = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    null_List.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(null_List)):</span><br><span class="line">        <span class="built_in">print</span>(null_List[i], end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-十六进制转八进制"><a href="#2-十六进制转八进制" class="headerlink" title="2.  十六进制转八进制"></a>2.  十六进制转八进制</h5><p>问题描述：给定n个十六进制正整数，输出它们对应的八进制数。</p><p>输入格式：<br>　　输入的第一行为一个正整数n （1&lt;&#x3D;n&lt;&#x3D;10）。<br>　　接下来n行，每行一个由0-9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。<br>输出格式：<br>　　输出n行，每行为输入对应的八进制正整数。</p><p>【注意】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p><p>样例输入<br>　　2<br>　　39<br>　　123ABC<br>样例输出<br>　　71<br>　　4435274　　　　</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin:转换成2进制 oct:转换成8进制 hex:转换成16进制 int:十进制</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">10</span>:</span><br><span class="line">        s=<span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">100000</span>:</span><br><span class="line">            res_1 = <span class="built_in">int</span>(s, <span class="number">16</span>)<span class="comment"># 把十六进制的s转换成十进制</span></span><br><span class="line">            res_2 = <span class="built_in">oct</span>(res_1)</span><br><span class="line">            li.append(res_2[<span class="number">2</span>:])<span class="comment"># 从第三位开始取</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-查找整数"><a href="#3-查找整数" class="headerlink" title="3. 查找整数"></a>3. 查找整数</h5><p>问题描述：<br>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。<br>输入格式：<br>第一行包含一个整数n。<br>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。<br>第三行包含一个整数a，为待查找的数。<br>输出格式：<br>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。<br>样例输入：<br>6<br>1 9 4 8 3 9<br>9<br>样例输出：<br>2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">if</span> a==nums[i]:</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">len</span>(nums)-<span class="number">1</span> <span class="keyword">and</span> a!=nums[i]:</span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="4-杨辉三角形"><a href="#4-杨辉三角形" class="headerlink" title="4. 杨辉三角形"></a>4. 杨辉三角形</h5><p>问题描述：<br>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。　　<br>下面给出了杨辉三角形的前4行：　　<br>1　　<br>1 1　　<br>1 2 1<br>1 3 3 1　　<br>给出n，输出它的前n行。<br>输入格式：<br>输入包含一个数n。<br>输出格式：<br>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。<br>样例输入：<br>4<br>样例输出：<br>1<br>1 1<br>1 2 1<br>1 3 3 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums=[[<span class="number">0</span>]*n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">            nums[i][j]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[i][j]=nums[i-<span class="number">1</span>][j-<span class="number">1</span>]+nums[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">if</span> nums[i][j]!=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(nums[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
